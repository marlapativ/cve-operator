/*
Copyright 2024.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1

import (
	kbatch "k8s.io/api/batch/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// EDIT THIS FILE!  THIS IS SCAFFOLDING FOR YOU TO OWN!
// NOTE: json tags are required.  Any new fields you add must have json tags for the fields to be serialized.

// GitHubReleasesMonitorSpec defines the desired state of GitHubReleasesMonitor
type GitHubReleasesMonitorSpec struct {
	// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster
	// Important: Run "make" to regenerate code after modifying this file

	// Owner of Github Repository on which the releases are monitored
	// +kubebuilder:validation:Required
	// +kubebuilder:validation:Type=string
	Owner string `json:"owner"`

	// Repository name of Github Repository on which the releases are monitored
	// +kubebuilder:validation:Required
	// +kubebuilder:validation:Type=string
	Repo string `json:"repo"`

	// Represents the time from which the GithubReleaseMonitor CRD is monitoring from.
	// Valid values are:
	// - "now": check for releases after the time CRD was created
	// - "date": check for releases after from the given UTC date time. The date should be in ISO 8601 format
	// +kubebuilder:validation:Required
	// +kubebuilder:validation:Type=string
	MonitorFrom string `json:"monitorFrom"`

	// Custom Job Template Spec to be executed on each release for GithubRelease CRD
	// - PodSpec `RestartPolicy` is always overridden to "OnFailure" to ensure the Job is re-executed on failure
	// - Github Release variables are injected to all the containers in the job
	//		- GITHUB_RELEASE_TAG	(Correlates to github release tag)
	//		- GITHUB_RELEASE_NAME	(Correlates to github release name)
	//		- CVE_LIST_URL			(Correlates to Browser download URL of the delta file)
	// +kubebuilder:validation:Required
	GitHubReleaseJobTemplateSpec kbatch.JobTemplateSpec `json:"githubReleaseJobTemplateSpec,omitempty"`
}

// GitHubReleasesMonitorStatus defines the observed state of GitHubReleasesMonitor
type GitHubReleasesMonitorStatus struct {
	// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster
	// Important: Run "make" to regenerate code after modifying this file

	// List of all releases fetched from the given Github releases URL
	Releases []int64 `json:"releases,omitempty"`

	// Last retrieved time of all releases for the given Github releases URL
	LastRetrievedTime metav1.Time `json:"lastRetrievedTime,omitempty"`

	// Time from which the GithubReleaseMonitor CRD is monitoring from for the given Github releases URL
	MonitorFrom metav1.Time `json:"monitorFrom,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status

// GitHubReleasesMonitor is the Schema for the githubreleasesmonitors API
type GitHubReleasesMonitor struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   GitHubReleasesMonitorSpec   `json:"spec,omitempty"`
	Status GitHubReleasesMonitorStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GitHubReleasesMonitorList contains a list of GitHubReleasesMonitor
type GitHubReleasesMonitorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GitHubReleasesMonitor `json:"items"`
}

func init() {
	SchemeBuilder.Register(&GitHubReleasesMonitor{}, &GitHubReleasesMonitorList{})
}
